/**
 *    Copyright 2006-2016 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package com.glad.tools.generator.config;

import static org.mybatis.generator.internal.util.StringUtility.isTrue;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

import org.mybatis.generator.api.CommentGenerator;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.CompilationUnit;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.InnerClass;
import org.mybatis.generator.api.dom.java.InnerEnum;
import org.mybatis.generator.api.dom.java.JavaElement;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.PropertyRegistry;
import org.mybatis.generator.internal.util.StringUtility;

/**
 * The Class CustomCommentGenerator.
 *
 * @author ZHONGQS
 */
public class CustomCommentGenerator implements CommentGenerator {

	/** The properties. */
	private Properties properties;

	private boolean suppressDate;

	/** The suppress all comments. */
	private boolean suppressAllComments;

	/**
	 * The addition of table remark's comments. If suppressAllComments is true, this option is ignored
	 */
	private boolean addRemarkComments;

	private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");

	/**
	 * Instantiates a new default comment generator.
	 */
	public CustomCommentGenerator() {
		super();
		properties = new Properties();
		suppressDate = false;
		suppressAllComments = false;
		addRemarkComments = false;
	}

	/**
	 * Java File Comment copyright
	 */
	public void addJavaFileComment(CompilationUnit compilationUnit) {
		compilationUnit.addFileCommentLine("/**");
		compilationUnit.addFileCommentLine("  * Copyright &copy; 2012-2017 <a href=\"\">GLAD</a> All rights reserved.");
		compilationUnit.addFileCommentLine(" */");
	}

	/**
	 * Adds a suitable comment to warn users that the element was generated, and when it was generated.
	 *
	 * @param xmlElement the xml element
	 */
	public void addComment(XmlElement xmlElement) {
		if (suppressAllComments) {
			return;
		}
		xmlElement.addElement(new TextElement("<!--"));

		StringBuilder sb = new StringBuilder();
		String s = getDateString();
		if (s != null) {
			sb.append(" This element was generated by ");
			sb.append(System.getProperty("user.name"));
			sb.append(" on ");
			sb.append(s);
			sb.append('.');
			xmlElement.addElement(new TextElement(sb.toString()));
		}

		xmlElement.addElement(new TextElement("-->"));
	}

	/*
	 * (non-Javadoc)
	 * @see org.mybatis.generator.api.CommentGenerator#addRootComment(org.mybatis. generator.api.dom.xml.XmlElement)
	 */
	public void addRootComment(XmlElement rootElement) {
		// add no document level comments by default
	}

	/*
	 * (non-Javadoc)
	 * @see org.mybatis.generator.api.CommentGenerator#addConfigurationProperties( java.util.Properties)
	 */
	public void addConfigurationProperties(Properties properties) {
		this.properties.putAll(properties);

		suppressDate = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));

		suppressAllComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));

		addRemarkComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_ADD_REMARK_COMMENTS));

		String dateFormatString = properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_DATE_FORMAT);
		if (StringUtility.stringHasValue(dateFormatString)) {
			dateFormat = new SimpleDateFormat(dateFormatString);
		}
	}

	/**
	 * This method adds the custom javadoc tag for. You may do nothing if you do not wish to include the Javadoc tag - however, if you do not include the
	 * Javadoc tag then the Java merge capability of the eclipse plugin will break.
	 *
	 * @param javaElement the java element
	 * @param markAsDoNotDelete the mark as do not delete
	 */
	protected void addJavadocTag(JavaElement javaElement, boolean markAsDoNotDelete) {
		StringBuilder sb = new StringBuilder();
		sb.append(" * ");
		if (markAsDoNotDelete) {
			sb.append(" do_not_delete_during_merge");
		}
		String s = getDateString();
		if (s != null) {
			sb.append(' ');
			sb.append(s);
		}
		javaElement.addJavaDocLine(sb.toString());
	}

	/**
	 * nowhere
	 */
	public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		innerClass.addJavaDocLine("/**");
		innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");

		sb.append(" * This class corresponds to the database table ");
		sb.append(introspectedTable.getFullyQualifiedTable().toString().toUpperCase());
		if (introspectedTable.getRemarks() != null && !"".equals(introspectedTable.getRemarks()))
			sb.append(" (" + introspectedTable.getRemarks() + ")");
		innerClass.addJavaDocLine(sb.toString());

		addJavadocTag(innerClass, false);

		innerClass.addJavaDocLine(" */");
	}

	/**
	 * Model Class Comment
	 */
	public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		topLevelClass.addJavaDocLine("/**");

		String remarks = introspectedTable.getRemarks();
		if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
			topLevelClass.addJavaDocLine(" * Database Table Remarks:");
			String[] remarkLines = remarks.split(System.getProperty("line.separator"));
			for (String remarkLine : remarkLines) {
				topLevelClass.addJavaDocLine(" *   " + remarkLine);
			}
		}
		topLevelClass.addJavaDocLine(" *");

		topLevelClass.addJavaDocLine(" * This model class was generated by MyBatis Generator.");

		sb.append(" * TABLE : ");
		sb.append(introspectedTable.getFullyQualifiedTable().toString().toUpperCase());
		if (introspectedTable.getRemarks() != null && !"".equals(introspectedTable.getRemarks()))
			sb.append(" (" + introspectedTable.getRemarks() + ")");
		topLevelClass.addJavaDocLine(sb.toString());

		addJavadocTag(topLevelClass, false);

		topLevelClass.addJavaDocLine(" */");
	}

	/**
	 * nowhere
	 */
	public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		innerEnum.addJavaDocLine("/**");
		innerEnum.addJavaDocLine(" * This enum was generated by MyBatis Generator.");

		sb.append(" * This enum corresponds to the database table ");
		sb.append(introspectedTable.getFullyQualifiedTable().toString().toUpperCase());
		if (introspectedTable.getRemarks() != null && !"".equals(introspectedTable.getRemarks()))
			sb.append(" (" + introspectedTable.getRemarks() + ")");
		innerEnum.addJavaDocLine(sb.toString());

		addJavadocTag(innerEnum, false);

		innerEnum.addJavaDocLine(" */");
	}

	/**
	 * Model Field Comment
	 */
	public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
		if (suppressAllComments) {
			return;
		}

		field.addJavaDocLine("/**");

		String remarks = introspectedColumn.getRemarks();
		if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
			String[] remarkLines = remarks.split(System.getProperty("line.separator"));
			for (String remarkLine : remarkLines) {
				field.addJavaDocLine(" *   " + remarkLine);
			}
		}
		StringBuilder sb = new StringBuilder();
		sb.append(" * ");
		sb.append(introspectedColumn.getActualColumnName());
		field.addJavaDocLine(sb.toString());

		field.addJavaDocLine(" */");
	}

	/**
	 * Example Field Comment
	 */
	public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
			return;
		}

		// StringBuilder sb = new StringBuilder();
		//
		// field.addJavaDocLine("/**");
		// field.addJavaDocLine(" * This field was generated by MyBatis Generator.");
		//
		// sb.append(" * This field corresponds to the database table ");
		// sb.append(introspectedTable.getFullyQualifiedTable().toString().toUpperCase());
		// field.addJavaDocLine(sb.toString());
		//
		// addJavadocTag(field, false);
		//
		// field.addJavaDocLine(" */");
	}

	/**
	 * Interface class method
	 */
	public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		method.addJavaDocLine("/**");
		sb.append(" * ");
		if (method.getName().startsWith("delete")) {
			sb.append("刪除");
		} else if (method.getName().startsWith("insert")) {
			sb.append("插入");
		} else if (method.getName().startsWith("update")) {
			sb.append("修改");
		} else if (method.getName().startsWith("select")) {
			sb.append("查詢");
		}

		sb.append(introspectedTable.getFullyQualifiedTable().toString().toUpperCase());
		if (introspectedTable.getRemarks() != null && !"".equals(introspectedTable.getRemarks()))
			sb.append(" (" + introspectedTable.getRemarks() + ")");
		method.addJavaDocLine(sb.toString());
		method.addJavaDocLine(" */");
	}

	/**
	 * Model Getter
	 */
	public void addGetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
		if (suppressAllComments) {
			return;
		}

		method.addJavaDocLine("/**");
		StringBuilder sb = new StringBuilder();
		sb.append(" * ");
		sb.append(introspectedTable.getFullyQualifiedTable().toString().toUpperCase());
		sb.append('.');
		sb.append(introspectedColumn.getActualColumnName());
		method.addJavaDocLine(sb.toString());

		method.addJavaDocLine(" *");

		sb.setLength(0);
		sb.append(" * @return the value of ");
		sb.append(introspectedTable.getFullyQualifiedTable().toString().toUpperCase());
		sb.append('.');
		sb.append(introspectedColumn.getActualColumnName());
		method.addJavaDocLine(sb.toString());

		method.addJavaDocLine(" */");
	}

	/**
	 * Model Setter
	 */
	public void addSetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
		if (suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		method.addJavaDocLine("/**");

		sb.append(" * ");
		sb.append(introspectedTable.getFullyQualifiedTable().toString().toUpperCase());
		sb.append('.');
		sb.append(introspectedColumn.getActualColumnName());
		method.addJavaDocLine(sb.toString());

		method.addJavaDocLine(" *");

		Parameter parm = method.getParameters().get(0);
		sb.setLength(0);
		sb.append(" * @param ");
		sb.append(parm.getName());
		sb.append(" the value for ");
		sb.append(introspectedTable.getFullyQualifiedTable().toString().toUpperCase());
		sb.append('.');
		sb.append(introspectedColumn.getActualColumnName());
		method.addJavaDocLine(sb.toString());

		method.addJavaDocLine(" */");
	}

	/*
	 * (non-Javadoc)
	 * @see org.mybatis.generator.api.CommentGenerator#addClassComment(org.mybatis. generator.api.dom.java.InnerClass,
	 * org.mybatis.generator.api.IntrospectedTable, boolean)
	 */
	public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) {

		StringBuilder sb = new StringBuilder();

		innerClass.addJavaDocLine("/**");
		innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");

		sb.append(" * TABLE : ");
		sb.append(introspectedTable.getFullyQualifiedTable().toString().toUpperCase());
		if (introspectedTable.getRemarks() != null && !"".equals(introspectedTable.getRemarks()))
			innerClass.addJavaDocLine(sb.toString());
		sb.append(" (" + introspectedTable.getRemarks() + ")");

		addJavadocTag(innerClass, markAsDoNotDelete);

		innerClass.addJavaDocLine(" */");
	}

	/**
	 * This method returns a formated date string to include in the Javadoc tag and XML comments. You may return null if you do not want the date in these
	 * documentation elements.
	 * 
	 * @return a string representing the current timestamp, or null
	 */
	protected String getDateString() {
		if (suppressDate) {
			return null;
		} else if (dateFormat != null) {
			return dateFormat.format(new Date());
		} else {
			return new Date().toString();
		}
	}

}
